#!/usr/bin/env sh
exec guile -e main -s "$0" "$@"
!#

;; TODO: maybe use (ice-9 optargs) instead of plist implementation
;; https://www.gnu.org/software/guile/manual/html_node/Coding-With-Keywords.html

(use-modules
 (ice-9 control)
 (ice-9 regex)
 (ice-9 rdelim)
 (ice-9 popen)
 (ice-9 match)
 (ice-9 ftw)
 (ice-9 pretty-print)
 (ice-9 poe)
 (ice-9 getopt-long)
 (ice-9 receive)
 (ice-9 string-fun)
 (web uri)
 (srfi srfi-1)
 (srfi srfi-2)
 (srfi srfi-26))

;;; State

(define jaro-bindings '())
(define jaro-named-bindings (make-hash-table))
(define jaro-conditional-runners (make-hash-table))
(define jaro-env #f)
(define jaro-cold-run? #t)
(define jaro-runner-method #f)
(define jaro-debug? #f)

(define (get-named-binding-or-bail! name)
  (or
   (hashq-ref jaro-named-bindings name)
   (error (format #f "Binding '~a' not found binding definitions!" name))))

;;; Config

(define dynamic-menu-program #f)
(define emacsclient-binary "emacsclient")

;;; Utils

(define-syntax ->
  (syntax-rules ()
    [(_ x) x]
    [(_ x (fn args ...) rest ...) (-> (fn x args ...) rest ...)]
    [(_ x fn rest ...) (-> (fn x) rest ...)]))

(define-syntax -?>
  (syntax-rules ()
    [(_ x) x]
    [(_ x (fn args ...) rest ...) (and-let* ((result (fn x args ...))) (-?> result rest ...))]
    [(_ x fn rest ...) (and-let* ((result (fn x))) (-?> result rest ...))]))

(define-syntax ->>
  (syntax-rules ()
    [(->> x) x]
    [(->> x (fn args ...) rest ...) (->> (fn args ... x) rest ...)]
    [(->> x fn) (fn x)]
    [(->> x fn rest ...) (->> (fn x) rest ...)]))

(define-syntax oscase
  (syntax-rules ()
    [(oscase)
     (error "Failed to detect system type! Error while using oscase.")]
    [(oscase type value rest ...)
     (if (equal? (system-type) (keyword->symbol type))
         value
         (oscase rest ...))]))

(define (flip arg1 fn arg2)
  (fn arg2 arg1))

(define specified? (compose not unspecified?))

(define (string->keyword str)
  (symbol->keyword
   (string->symbol (if (string-prefix? "#:" str)
                       (substring str 2)
                       str))))

(define (sh cmd)
  (let* ([error-pipe (pipe)]
         [port (with-error-to-port (cdr error-pipe)
                 (λ ()
                   (cond
                    ((string? cmd) (open-input-pipe cmd))
                    ((list? cmd) (apply open-pipe* (cons OPEN_READ cmd))))))]
         [std-out (read-string port)])
    (close-port (cdr error-pipe))
    (values
     (close-pipe port)
     std-out
     (read-string (car error-pipe)))))

(define (sh-out cmd)
  (receive (exit-code std-out _)
      (sh cmd)
    (if (equal? exit-code 0)
        std-out
        #f)))

(define (system-type)
  (let ((typ (string-downcase (utsname:sysname (uname)))))
    (cond
     [(string-contains typ "darwin") 'darwin]
     [(string-contains typ "linux") 'gnu/linux]
     [(string-contains typ "windows") 'windows])))

(define (append-to-file file-path string)
  (let ((output-port (open-file file-path "a")))
    (display string output-port)
    (newline output-port)
    (close output-port)))

;; https://github.com/alezost/guile-config/blob/master/modules/al/plists.scm
(define (plist-get plist property)
  "Return a value of PROPERTY from PLIST.
Return #f if PROPERTY does not exist."
  (match plist
    ((prop val rest ...)
     (if (eq? prop property)
         val
         (plist-get rest property)))
    (_ #f)))

(define (plist-keys plist)
  "Return keys of PLIST."
  (let loop ((result '())
             (current plist))
    (match current
      (() result)
      ((prop val rest ...) (loop (append result (list prop)) rest)))))

(define (string-split-once str pattern)
  (let ((result (string-split str pattern)))
    (list
     (car result)
     (string-join (list-tail result 1) (format #f "~a" pattern)))))

(define (tap x)
  (display (format #f ">>> ~a\n" x))
  x)

;;; Mimetype

(define (mimetype-by command)
  "Extract the mimetype from the output of the COMMAND."
  (let* ((result (and=> (sh-out command) string-trim-both)))
    (and result (not (string-null? result)) result)))

(define (mimetype-of-uri URI)
  "Get the mimetype of given URI."
  (let ((uri (string->uri URI)))
    (and
     uri
     (string-append "x-scheme-handler/" (symbol->string (uri-scheme uri))))))

(define (mimetype-of-file file)
  "Get the mimetype of FILE using `mimetype' binary."
  (if (access? file R_OK)
      (or
       (mimetype-by `("mimetype" "--brief" "--dereference" ,file))
       (mimetype-by `("file" "--brief" "--dereference" "--mime-type" ,file)))
      #f))

(define mimetype
  (pure-funcq
   (λ (path)
     "Get mimetype of given PATH."
     (or
      (mimetype-of-uri path)
      (mimetype-of-file path)))))

;;; Conditional runners

(define-syntax define-conditional-runner
  (syntax-rules ()
    ((_ (name arg) body ...)
     (hash-set! jaro-conditional-runners 'name (lambda (arg) body ...)))))

(define-conditional-runner (emacs _)
  (or (getenv "INSIDE_EMACS") (string-contains-ci (or (getenv "_") "") "emacs")))

(define-conditional-runner (tmux _)
  (getenv "TMUX"))

(define-conditional-runner (screen _)
  (getenv "STY"))

(define-conditional-runner (vim _)
  (getenv "VIMRUNTIME"))

(define-conditional-runner (term _)
  (isatty? (current-output-port)))

;;; Pattern

(define (run-regexp pattern input mimetype)
  "Check if given PATTERN matches with INPUT or MIMETYPE."
  (or (regexp-exec pattern input)
      (and mimetype (regexp-exec pattern mimetype))))

(define (pattern-matches? pattern input)
  "Check if PATTERN matches with the INPUT."
  (cond
   ((regexp? pattern)
    (run-regexp pattern input (mimetype input)))
   ((list? pattern)
    (any identity (map (cut pattern-matches? <> input) pattern)))
   (else #f)))

(define (compile-pattern pattern)
  "Compile given PATTERN into regexp or list of regexpes."
  (cond
   ((string? pattern) (make-regexp pattern))
   ((regexp? pattern) pattern)
   ((list? pattern) (map compile-pattern pattern))))

(define (binding->env-program binding)
  (find
   (λ (it)
     (and-let* ([_ (keyword? it)]
                [env (symbol->string (keyword->symbol it))]
                [_ (string-prefix? "env=" env)]
                [isenv (getenv (substring env 4))])
       #t))
   binding))

(define (binding->runner binding input)
  "Get the running strategy for given BINDING based on the environment."
  (or
   ;; Directly run the --method=... if it's available
   (and-let* ([method jaro-runner-method]
              [runner (plist-get binding method)])
     (cons method runner))
   ;; Run the #:env=...
   (and-let* ([method (binding->env-program binding)]
              [runner (plist-get binding method)])
     (cons method runner))
   ;; Find the conditional runner and run
   (and-let* ([try-list (append
                         (if jaro-env (list (symbol->keyword jaro-env)) '())
                         (remove
                          non-program-key?
                          (plist-keys binding)))]
              [method (find (lambda (key)
                              ((or (hash-ref jaro-conditional-runners (keyword->symbol key))
                                   (lambda (_) #f))
                               input))
                            try-list)])
     (cons method (plist-get binding method)))
   ;; Simply run the #:program
   (cons #:program (plist-get binding #:program))))

;;; Running programs

;; TODO: maybe extend this, so that user can define what happens on
;; each exit code.  like #:exit=0 "this" #:exit=555 "that"
(define (map-exit-code code)
  (case code
    ((0) #t)
    (else #f)))

(define (program? it)
  "Return if IT is a runnable thing or not."
  (or (string? it)
      (procedure? it)
      (and (list? it) (not (null-list? it)))
      (and (symbol? it) (hashq-get-handle jaro-named-bindings it))))

(define (non-program-key? x)
  (member
   x
   (list
    #:name
    #:program
    #:pattern
    #:test
    #:on-fail
    #:on-success
    #:on-error
    #:continue-on-error)))

(define (jaro-system program)
  (jaro-debug "(jaro-system ~a)" program)
  (cond
   [jaro-cold-run? program]
   [else (map-exit-code
          (cond
           ((string? program) (system program))
           ((list? program) (apply system* program))))]))

(define (run-program program pattern input binding)
  (cond
   [(procedure? program)
    (program
     input
     (mimetype input)
     (get-matches program pattern input)
     binding)]
   [(or (list? program) (string? program))
    (jaro-system (format-program program (get-matches program pattern input) input))]
   [(symbol? program)
    (run-binding
     (cdr (hashq-get-handle jaro-named-bindings program))
     '()
     input)]
   [else
    'jaro-bad-program]))

(define (run-alternatives input alternatives)
  (if (null? alternatives)
      'jaro-no-matches
      (run-binding (car alternatives) (cdr alternatives) input)))

;;; Path ops

(define regexp/url (make-regexp "^[a-zA-Z]+:"))

(define (string-last-char str)
  (string-ref str (1- (string-length str))))

(define (path-join . paths)
  (define (joiner current-path full-path)
    (cond
     ((string-null? full-path) current-path)
     ((equal? (string-last-char full-path) #\/) (string-append full-path current-path))
     (else (string-append full-path "/" current-path))))
  (fold joiner  "" paths))

(define (path->abs path)
  (cond
   ((equal? (string-ref path 0) #\/) path)
   ((regexp-exec regexp/url path) path)
   (else (path-join (getcwd) path))))

(define (path->uri path)
  (cond
   ((regexp-exec regexp/url path) path)
   (else (string-append "file://" (path->abs path)))))

;;; Defaults

(define home-dir
  (getenv "HOME"))

(define config-dir
  (or (getenv "XDG_CONFIG_HOME") (path-join home-dir ".config")))

(define cache-dir
  (or (getenv "XDG_CACHE_HOME") (path-join home-dir ".cache")))

(define jaro-binding-file-path
  (path-join config-dir "associations"))

;;; Formatter related

(define (get-matches program pattern input)
  (cond
   ((regexp? pattern)
    (let* ((matches (run-regexp pattern input (mimetype input))))
      (map
       (λ (it)
         (cons (string-append "%" (number->string it))
               (match:substring matches it)))
       (iota (match:count matches)))))
   ((list? pattern)
    (and-let* ([matched-pattern (find (cut pattern-matches? <> input) pattern)])
      (get-matches program matched-pattern input)))))

(define (format-program program matches input)
  (cond
   ((list? program) (map (cut format-program <> matches input) program))
   ((symbol? program) (format-program (symbol->string program) matches input))
   ((string? program)
    (regexp-substitute/global
     #f
     "%[0-9fFUd]"
     program
     'pre
     (λ (m)
       (match (match:substring m)
         ["%d" (dirname (path->abs input))]
         ["%f" input]
         ["%F" (path->abs input)]
         ["%U" (path->uri input)]
         [subgroup (or (assoc-ref matches subgroup) subgroup)]))
     'post))))

;;; INI stuff

(define (system-binary-list)
  (delete-duplicates!
   (append-map
    (λ (path)
      (or (scandir
           path
           (λ (file)
             (let ((abspath (path-join path file)))
               (and (file-exists? abspath) (not (file-is-directory? abspath))))))
          '()))
    (string-split (getenv "PATH") #\:))))

(define (read-ini file)
  "Read an INI FILE and return a hashtable."
  (define current-group #f)
  (define ini-file (open-input-file file))
  (define ini (make-hash-table))
  (let loop ()
    (define line (read-line ini-file))
    (unless (eof-object? line)
      (set! line (string-trim-both line))
      (cond
       ((or (string-null? line)
            ;; TODO replace with contains
            (equal? (string-ref line 0) #\;)
            (equal? (string-ref line 0) #\#))
        (loop))
       ((and (equal? (string-ref line 0) #\[)
             (equal? (string-ref line (1- (string-length line))) #\]))
        (set! current-group (substring line 1 (1- (string-length line))))
        (hash-set! ini current-group (make-hash-table))
        (loop))
       (else
        (let* ((line-data (map string-trim-both (string-split-once line #\=)))
               (key (car line-data))
               (val (cadr line-data)))
          (hash-set! (hash-ref ini current-group (make-hash-table)) key val)
          (loop))))))
  (close-input-port ini-file)
  ini)

(define (read-boolean val)
  (string= (string-downcase val) "true"))

;; TODO read local values (tr, en, etc.)
(define (read-app-ini file)
  (let* ([ini (read-ini file)]
         [desktop-entry (hash-ref ini "Desktop Entry")]
         [name (hash-ref desktop-entry "Name")]
         [comment (or (hash-ref desktop-entry "Comment") "...")])
    (list
     #:name name
     #:comment comment
     #:exec (hash-ref desktop-entry "Exec")
     #:term (and=> (hash-ref desktop-entry "Terminal") read-boolean)
     #:display-name (format #f "~a (~a)"
                            (string-delete #\" name)
                            (string-delete #\" comment)))))

(define (get-alternatives-for apps-dir mimetype)
  (or
   (-?>
    (path-join apps-dir "mimeinfo.cache")
    (read-ini)
    (hash-ref "MIME Cache")
    (hash-ref mimetype)
    (string-split #\;)
    (flip filter (compose not string-null?))
    (flip map (λ (it) (read-app-ini (path-join apps-dir it)))))
   '()))

;; TODO somehow support macos? seems quite hard tho
(define (get-all-alternatives-for mimetype)
  (append-map
   (λ (it) (get-alternatives-for it mimetype))
   (get-xdg-application-dirs)))

(define (get-xdg-application-dirs)
  (filter
   (cut access? <> R_OK)
   (map
    (λ (it) (path-join it "applications"))
    (string-split
     (or (getenv "XDG_DATA_DIRS")  "/usr/local/share/:/usr/share/")
     #\:))))

(define (plist-find key item list)
  (find (λ (it) (equal? (plist-get it key) item)) list))

(define (get-all-named-alternatives)
  (apply
   append
   (hash-map->list
    (lambda (key val)
      (map
       (lambda (prog)
         `(#:display-name
           ,(make-binding-display-name val (if (eq? prog 'self) #f prog))
           ,@val))
       `(self ,@(remove non-program-key? (plist-keys val)))))
    (tap jaro-named-bindings))))

(define* (make-binding-display-name binding #:optional method)
  (let* ((comment (plist-get binding #:comment)))
    (format #f "> ~a~a~a"
            (plist-get binding #:name)
            (if method (format #f ".~a" (symbol->string (keyword->symbol method))) "")
            (if comment (format #f " (~a)" comment) ""))))

(define (select-one-of . args)
  (λ (input mimetype matches binding)
    (let* ([desktop-files
            (if (memq #:alternatives args)
                (get-all-alternatives-for mimetype)
                '())]
           [binaries
            (if (memq #:binaries args)
                (system-binary-list)
                '())]
           [methods
            (if (memq #:methods args)
                (remove non-program-key? (plist-keys binding))
                '())]
           [named-bindings
            (if (memq #:bindings args)
                (get-all-named-alternatives)
                '())]
           [entries
            (->
             (map
              (λ (it)
                (case it
                  [(#:alternatives)
                   (string-join
                    (map (cut plist-get <> #:display-name) desktop-files)
                    "\n")]
                  [(#:binaries)
                   (string-join
                    (map (cut string-append <> "*") binaries)
                    "\n")]
                  [(#:bindings)
                   (string-join
                    (map (cut plist-get <> #:display-name) named-bindings)
                    "\n")]
                  [(#:methods)
                   (string-join
                    (map (cut format #f "~a" <>) methods)
                    "\n")]
                  [else
                   (when (keyword? it)
                     (error (format #f "select-one-of: not a valid keyword: ~a" it)))
                   ;; Resolve 'binding.method
                   (match (string-split-once (symbol->string it) #\.)
                     [(_ "")
                      (make-binding-display-name (get-named-binding-or-bail! it))]
                     [(parent method)
                      (format
                       #f "~a.~a"
                       (make-binding-display-name
                        (get-named-binding-or-bail! (string->symbol parent)))
                       method)])]))
              args)
             (string-join "\n")
             (string-trim-both))]
           [out
            ;; FIXME: directly send to the process instead of using shell pipes
            ;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=52835
            (sh-out (string-append
                     "printf "
                     "'"
                     (string-replace-substring entries "'" "")
                     "'"
                     " | "
                     dynamic-menu-program))]
           [result
            (and=> out string-trim-both)])
      (cond
       [jaro-cold-run?
        (list 'select-one-of result)]
       [(not result)
        (display "No matches found!")
        (newline)
        (exit 1)]
       ;; Named binding & NamedBinding.method
       [(and (string-prefix? ">" result))
        (match (string-split-once result #\.)
          [(_ "")
           (run-binding (plist-find #:display-name result named-bindings) '() input)]
          [(parent method)
           (run-program
            (plist-get
             (plist-find #:display-name parent named-bindings)
             (string->keyword method))
            (plist-get binding #:pattern)
            input binding)])]
       ;; Desktop file
       [(string-suffix? ")" result)
        (let* ([app-exec
                (plist-get
                 (plist-find #:display-name result desktop-files)
                 #:exec)]
               [exec
                ;; FIXME need to comply with freedesktop standards
                ;; https://specifications.freedesktop.org/desktop-entry-spec/1.1/ar01s06.html
                (regexp-substitute
                 #f (string-match "(%f|%F|%u|%U)" app-exec)
                 'pre input 'post)])
          (system exec))]
       ;; Binary
       [(string-suffix? "*" result)
        (system* (string-trim-right result #\*) input)]
       ;; Method
       [(string-prefix? "#:" result)
        (run-program
         (plist-get binding (string->keyword result))
         (plist-get binding #:pattern)
         input binding)]
       ;; ?
       [else
        (format #t "select-one-of: Input ~a is not a command!" result)
        (newline)
        (exit 1)]))))

;;; User level functions

(define* (bind #:key pattern name #:allow-other-keys #:rest args)
  (set! jaro-bindings (append! jaro-bindings `((#:pattern ,(compile-pattern pattern) ,@args))))
  (when name
    (hashq-set! jaro-named-bindings name args)))

(define (open-with name)
  (λ (file . r)
    (let ((opener (hashq-ref jaro-named-bindings name)))
      (cond
       (opener
        (run-binding opener '() file))
       (else
        (display (symbol->string name))
        (display " not found in bindings!")
        (newline)
        #f)))))

(define-syntax program
  (λ (x)
    (syntax-case x ()
      ((_ body ...)
       (with-syntax ((input (datum->syntax x '$input))
                     (mimetype (datum->syntax x '$mimetype))
                     (matches (datum->syntax x '$matches))
                     (binding (datum->syntax x '$binding))
                     ($0 (datum->syntax x '$0))
                     ($1 (datum->syntax x '$1))
                     ($2 (datum->syntax x '$2))
                     ($3 (datum->syntax x '$3))
                     ($4 (datum->syntax x '$4))
                     ($5 (datum->syntax x '$5)))
         #'(λ (input mimetype matches binding)
             (let ([$0 (assoc-ref matches "%0")]
                   [$1 (assoc-ref matches "%1")]
                   [$2 (assoc-ref matches "%2")]
                   [$3 (assoc-ref matches "%3")]
                   [$4 (assoc-ref matches "%4")]
                   [$5 (assoc-ref matches "%5")])
               body ...)))))))

(define-syntax elisp
  (syntax-rules ()
    ((_ exp ...)
     (λ (input mimetype matches binding)
       (jaro-system
        (list
         emacsclient-binary "--eval"
         (format-program
          (format #f "~s" (quote (progn exp ...)))
          matches
          input)))))))

;;; Jaro utils

(define* (jaro-debug in #:rest args)
  (when jaro-debug?
    (display (apply format #f (string-append ">> [jaro] " in) args))
    (newline)))

;;; Main

(define (run-binding binding alternatives input)
  (let* ([pattern (plist-get binding #:pattern)]
         [program-info (binding->runner binding input)]
         [program-env (car program-info)]
         [program (cdr program-info)]
         [test (plist-get binding #:test)]
         [on-fail (plist-get binding #:on-fail)]
         [on-success (plist-get binding #:on-success)]
         [on-error (plist-get binding #:on-error)]
         [continue-on-error (plist-get binding #:continue-on-error)])
    (jaro-debug "running ~a with input" binding input)
    (cond
     [(or (not test)
          (and test (run-program test pattern input binding))
          ;; TODO Why?
          (and test (not (equal? program-env #:program))))
      (let ((success? (run-program program pattern input binding)))
        (jaro-debug "running result is ~a" success?)
        (cond
         ((and success? on-success)
          (run-program on-success pattern input binding))
         (success?
          success?)
         ((or (eq? on-error 'continue) continue-on-error)
          (run-alternatives input alternatives))
         ((eq? on-error #f)
          'jaro-non-zero-without-on-error)
         ((program? on-error)
          (run-program on-error pattern input binding))
         (else
          'jaro-run-binding-failed)))]
     [(and test (program? on-fail))
      (jaro-debug "test failed, running on-fail")
      (run-program on-fail pattern input binding)]
     [(and test (eqv? on-fail 'stop))
      (jaro-debug "test failed, on-fail stops the execution")
      'jaro-match-failed]
     [test
      (jaro-debug "test failed, running on-fail")
      (run-alternatives input alternatives)]
     [else
      'jaro-unknown])))

(define (jaro-run input)
  (let* ((candidates
          (filter
           (λ (it) (pattern-matches? (plist-get it #:pattern) input))
           jaro-bindings)))
    (if (null? candidates)
        (begin
          (jaro-debug "failed to match anything!")
          'jaro-no-matches)
        (begin
          (jaro-debug "possible candidates are ~a" candidates)
          (run-binding (car candidates) (cdr candidates) input)))))

(define (main args)
  (let* ((option-spec '((mime-type (single-char #\t) (value #f))
                        (cold-run (single-char #\c) (value #f))
                        (binding-file (single-char #\f) (value #t))
                        (method (single-char #\m) (value #t))
                        (no-stdin (single-char #\N) (value #f))
                        (help (single-char #\h) (value #f))))
         (options (getopt-long args option-spec))
         (cold-run? (option-ref options 'cold-run #f))
         (mime? (option-ref options 'mime-type #f))
         (method? (option-ref options 'method #f))
         (no-stdin? (option-ref options 'no-stdin #f))
         (binding-file? (option-ref options 'binding-file jaro-binding-file-path))
         (help? (option-ref options 'help #f))
         (url? (option-ref options '() #f))
         (url (cond
               ((pair? url?) (car url?))
               (no-stdin? #f)
               (else (read-line)))))
    (set! jaro-env (option-ref options 'force-env #f))
    (cond
     (mime?
      (display (mimetype url))
      (newline))
     (help?
      (display "No help yet :( Please read the README.md file at github."))
     ((not url)
      (display "No URI found.")
      (newline)
      (exit 1))
     (else
      (set! jaro-cold-run? cold-run?)
      (set! jaro-runner-method (and method? (symbol->keyword (string->symbol method?))))
      (load binding-file?)
      (jaro-run url)))))
